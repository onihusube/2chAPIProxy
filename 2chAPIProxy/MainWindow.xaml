<Window
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008" xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" xmlns:local="clr-namespace:_2chAPIProxy" mc:Ignorable="d" x:Class="_2chAPIProxy.MainWindow"
        Title="2chAPIProxy Ver:2023.06.21 test" Height="480" Width="640"
        Icon="icon3.ico" WindowStartupLocation="CenterScreen" ResizeMode="CanMinimize" Background="White" d:DataContext="{d:DesignInstance {x:Type local:ViewModel}}">
    <Window.InputBindings>
        <KeyBinding Gesture="Ctrl+S" Command="{Binding SaveSetting}"/>
    </Window.InputBindings>
    <Window.Resources>
        <Style TargetType="TextBlock">
            <Setter Property="FontSize" Value="12px"/>
        </Style>
        <Style TargetType="TextBox">
            <Setter Property="FontSize" Value="12px"/>
        </Style>
        <Style TargetType="CheckBox">
            <Setter Property="FontSize" Value="12px"/>
        </Style>
        <Style TargetType="Button">
            <Setter Property="FontSize" Value="12px"/>
        </Style>
        <Style TargetType="GroupBox">
            <Setter Property="FontSize" Value="12px"/>
        </Style>
        <Style TargetType="TabItem">
            <Setter Property="FontSize" Value="12px"/>
        </Style>
    </Window.Resources>
    <Grid>
        <TabControl HorizontalAlignment="Center" Height="452.4" VerticalAlignment="Top" Width="634" Background="{x:Null}">
            <TabItem x:Name="BaseTab" Header="基本" KeyboardNavigation.TabNavigation="Local">
                <Grid x:Name="TabUI">
                    <Button x:Name="Start" HorizontalAlignment="Left" Height="25" Margin="338,10,0,0" VerticalAlignment="Top" Width="85" RenderTransformOrigin="0.55,-0.934" ToolTip="与えられたポートで待機するプロクシとしての動作を開始/終了します" Command="{Binding OnClick, Mode=OneWay}" CommandParameter="Start" TabIndex="2">
                        <Button.Style>
                            <Style TargetType="{x:Type Button}">
                                <Setter Property="FontSize" Value="12px"/>
                                <Setter Property="Content" Value="開始"/>
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding NowStart}" Value="True">
                                        <Setter Property="Content" Value="停止"/>
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </Button.Style>
                    </Button>
                    <TextBox x:Name="portnum" Height="25" Margin="158,10,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="175" HorizontalAlignment="Left" ToolTip="プロクシとしてアクセスを受け付けるポート番号を指定。分からない場合は自動選択にチェック" Text="{Binding PortNumber, Mode=TwoWay, NotifyOnTargetUpdated=True, NotifyOnSourceUpdated=True, StringFormat=\{0:D\}, UpdateSourceTrigger=LostFocus,ValidatesOnExceptions=True}" TabIndex="1"/>
                    <TextBlock HorizontalAlignment="Left" Height="25" Margin="93,14,0,0" TextWrapping="Wrap" VerticalAlignment="Top" TextAlignment="Center"><Run Language="ja-jp" Text="ポート番号"/></TextBlock>
                    <CheckBox x:Name="AutoStart" Content="起動と同時に開始" HorizontalAlignment="Left" Height="20" Margin="428,10,0,0" VerticalAlignment="Top" Width="115" ToolTip="起動時に自動でプロクシとして動作を開始します。次の起動時から有効" IsChecked="{Binding AutoStart, Mode=TwoWay, NotifyOnTargetUpdated=True, NotifyOnSourceUpdated=True, UpdateSourceTrigger=PropertyChanged}" TabIndex="3"/>
                    <CheckBox x:Name="AutoSelect" Content="ポートを自動選択" HorizontalAlignment="Left" Height="20" Margin="428,30,0,0" VerticalAlignment="Top" Width="115" ToolTip="空いているポートを自動選択、ポート番号欄に選択されたポート番号が表示されます。起動と同時に開始と併用しないでください。" IsChecked="{Binding AutoSelect, Mode=TwoWay, NotifyOnTargetUpdated=True, NotifyOnSourceUpdated=True, UpdateSourceTrigger=PropertyChanged}" TabIndex="4"/>
                    <Button x:Name="UpdateSIS" Content="SID更新" HorizontalAlignment="Left" Height="25" Margin="248,41.84,0,0" VerticalAlignment="Top" Width="85" ToolTip="現在使用しているSessionIDを更新" Command="{Binding OnClick, Mode=OneWay}" CommandParameter="UpdateSID" TabIndex="7"/>
                    <GroupBox Header="動作ログ" Margin="10,222,10,0" Height="186" VerticalAlignment="Top">
                        <TextBox x:Name="OutText" Margin="10,10,10,5.4" TextWrapping="NoWrap" SpellCheck.IsEnabled="True" AcceptsReturn="True" VerticalScrollBarVisibility="Auto" HorizontalScrollBarVisibility="Auto" IsReadOnlyCaretVisible="True" Text="{Binding SystemLog, Mode=TwoWay, NotifyOnTargetUpdated=True, NotifyOnSourceUpdated=True, UpdateSourceTrigger=LostFocus}" TabIndex="12"/>
                    </GroupBox>
                    <TextBox x:Name="appkey" HorizontalAlignment="Left" Height="25" Margin="158,72,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="385" ToolTip="AppKey入力欄、変更後は&quot;変更を適用&quot;を押してください" Text="{Binding Appkey, Mode=TwoWay, NotifyOnTargetUpdated=True, NotifyOnSourceUpdated=True, UpdateSourceTrigger=LostFocus}" TabIndex="8"/>
                    <TextBox x:Name="hmkey" HorizontalAlignment="Left" Height="25" Margin="158,102,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="385" ToolTip="HMKey入力欄、変更後は&quot;変更を適用&quot;を押してください" Text="{Binding HMkey, Mode=TwoWay, NotifyOnTargetUpdated=True, NotifyOnSourceUpdated=True, UpdateSourceTrigger=LostFocus}" TabIndex="9"/>
                    <TextBlock HorizontalAlignment="Left" Height="20" Margin="102,77,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="47.462" TextAlignment="Center"><Run Language="ja-jp" Text="AppKey"/></TextBlock>
                    <TextBlock HorizontalAlignment="Left" Height="20" Margin="103,107,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="42.544" TextAlignment="Center"><Run Language="ja-jp" Text="HMKey"/></TextBlock>
                    <Button x:Name="UpdateKey" Content="変更を適用" HorizontalAlignment="Left" Height="25" Margin="158,41.84,0,0" VerticalAlignment="Top" Width="85" ToolTip="以下5つのkeyの変更を反映し保存します" Command="{Binding OnClick, Mode=OneWay}" CommandParameter="UpdateKey" TabIndex="6"/>
                    <TextBox x:Name="ua1" HorizontalAlignment="Left" Height="25" Margin="158,132,0,0" TextWrapping="NoWrap" VerticalAlignment="Top" Width="385" ToolTip="SessionID取得時認証用のX-2cUA、変更後は&quot;変更を適用&quot;を押してください" Text="{Binding UserAgent1, Mode=TwoWay, NotifyOnTargetUpdated=True, NotifyOnSourceUpdated=True, UpdateSourceTrigger=LostFocus}" TabIndex="10"/>
                    <TextBlock HorizontalAlignment="Left" Height="20" Margin="101,137,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="50" TextAlignment="Center" Text="X2chUA"/>
                    <TextBox x:Name="ua2" HorizontalAlignment="Left" Height="25" Margin="158,162,0,0" TextWrapping="NoWrap" VerticalAlignment="Top" Width="385" ToolTip="SessionID取得時のUA、変更後は&quot;変更を適用&quot;を押してください" TabIndex="11" Text="{Binding UserAgent0, Mode=TwoWay, NotifyOnTargetUpdated=True, NotifyOnSourceUpdated=True, UpdateSourceTrigger=LostFocus}"/>
                    <TextBlock HorizontalAlignment="Left" Height="20" Margin="105,167,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="50" Text="UA(SID)"/>
                    <!--<CheckBox Content="2chへのアクセスを5chに置換する" HorizontalAlignment="Left" VerticalAlignment="Top" Margin="428,50,0,0" IsChecked="{Binding Use5chnet, Mode=TwoWay, NotifyOnTargetUpdated=True, NotifyOnSourceUpdated=True, UpdateSourceTrigger=PropertyChanged}" TabIndex="5"/>-->
                    <TextBox x:Name="ua2_Copy" HorizontalAlignment="Left" Height="25" Margin="158,192,0,0" TextWrapping="NoWrap" VerticalAlignment="Top" Width="385" ToolTip="dat取得時のUA、変更後は&quot;変更を適用&quot;を押してください" Text="{Binding UserAgent2, Mode=TwoWay, NotifyOnTargetUpdated=True, NotifyOnSourceUpdated=True, UpdateSourceTrigger=LostFocus}" TabIndex="11"/>
                    <TextBlock HorizontalAlignment="Left" Height="20" Margin="105,197,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="50"><Run Language="ja-jp" Text="UA(dat)"/></TextBlock>
                    <Button x:Name="KeyReset" Content="Key/UAリセット" HorizontalAlignment="Left" Height="25" Margin="338,42,0,0" VerticalAlignment="Top" Width="85" ToolTip="SID取得に必要なAPIキーとUAを最新のデフォルト設定にリセットします。SIDやdatが取得できない場合に試してみてください。" Command="{Binding OnClick, Mode=OneWay}" CommandParameter="KeyReset" TabIndex="7"/>
                </Grid>
            </TabItem>
            <TabItem x:Name="SetTab1" Header="動作設定" KeyboardNavigation.TabNavigation="Local">
                <Grid>
                    <GroupBox x:Name="ViewerGroup" Header="浪人" HorizontalAlignment="Left" Height="90" Margin="10,100,0,0" VerticalAlignment="Top" Width="604"/>
                    <GroupBox x:Name="UAGroup" Header="User Agent" HorizontalAlignment="Left" Height="85" Margin="10,10,0,0" VerticalAlignment="Top" Width="604"/>
                    <TextBox x:Name="RouninID" HorizontalAlignment="Left" Height="25" Margin="85,121,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="500" ToolTip="浪人のID、保存時は暗号化されます" Text="{Binding RouninID, Mode=TwoWay, NotifyOnTargetUpdated=True, NotifyOnSourceUpdated=True, UpdateSourceTrigger=LostFocus}" TabIndex="7"/>
                    <TextBlock HorizontalAlignment="Left" Height="25" Margin="62,125,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="20"><Run Language="ja-jp" Text="ID"/></TextBlock>
                    <TextBlock HorizontalAlignment="Left" Height="25" Margin="60,155,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="20"><Run Language="ja-jp" Text="PW"/></TextBlock>
                    <PasswordBox x:Name="RouninPW" HorizontalAlignment="Left" Height="25" Margin="85,151,0,0" VerticalAlignment="Top" Width="500" ToolTip="浪人のPW、保存時は暗号化されます" local:PasswordBoxHelper.IsAttached="True" local:PasswordBoxHelper.Password="{Binding RouninPW, Mode=TwoWay, NotifyOnTargetUpdated=True, NotifyOnSourceUpdated=True, UpdateSourceTrigger=LostFocus}" TabIndex="8"/>
                    <TextBlock HorizontalAlignment="Left" TextWrapping="Wrap" VerticalAlignment="Top" Width="50" Margin="30,46,0,0" Height="20"><Run Text="その他"/></TextBlock>
                    <TextBox x:Name="OtherUA" HorizontalAlignment="Left" Height="25" VerticalAlignment="Top" Width="500" Margin="84,41,0,0" ToolTip="HTML取得時や書き込みリトライ時に使用するUA" Text="{Binding UserAgent4, Mode=TwoWay, NotifyOnTargetUpdated=True, NotifyOnSourceUpdated=True, UpdateSourceTrigger=LostFocus}" TabIndex="2"/>
                    <GroupBox Header="プロクシ設定" HorizontalAlignment="Left" VerticalAlignment="Top" Margin="10,201,0,0" Height="85" Width="604"/>
                    <TextBox x:Name="ProxyAddress" HorizontalAlignment="Left" Height="25" Margin="85,224,0,0" TextWrapping="NoWrap" VerticalAlignment="Top" Width="500" ToolTip="2chAPIProxyが接続に使用するプロクシの設定。アドレス:ポート番号のように入力" Text="{Binding ProxyAddress, Mode=TwoWay, NotifyOnTargetUpdated=True, NotifyOnSourceUpdated=True, UpdateSourceTrigger=LostFocus, ValidatesOnExceptions=True}" TabIndex="9"/>
                    <TextBlock HorizontalAlignment="Left" Height="20" Margin="31,229,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="49"><Run Language="ja-jp" Text="アドレス"/></TextBlock>
                    <CheckBox x:Name="Socks4aProxy" Content="SOCKS4aプロクシ" HorizontalAlignment="Left" Height="20" Margin="85,255,0,0" VerticalAlignment="Top" Width="138" ToolTip="指定したプロクシサーバーがSOCKS4aプロクシである場合はチェック" IsChecked="{Binding Socks4aProxy, Mode=TwoWay, NotifyOnTargetUpdated=True, NotifyOnSourceUpdated=True, UpdateSourceTrigger=PropertyChanged}" TabIndex="10"/>
                    <Button x:Name="SettingSave1" HorizontalAlignment="Left" Height="25" Margin="10,383.4,0,0" VerticalAlignment="Top" Width="85" ToolTip="全タブの設定変更をファイルへ保存します" Command="{Binding OnClick, Mode=OneWay}" CommandParameter="UpdateKey" TabIndex="13">
                        <StackPanel>
                            <TextBlock>変更を保存</TextBlock>
                            <Popup Name="SaveNotice1" Placement="Top" StaysOpen="False" PopupAnimation="Fade" IsOpen="{Binding PopupVisible, Mode=TwoWay, NotifyOnTargetUpdated=True, NotifyOnSourceUpdated=True, UpdateSourceTrigger=PropertyChanged}">
                                <TextBlock Background="LightCyan" Foreground="LightSlateGray">保存しました</TextBlock>
                            </Popup>
                        </StackPanel>
                    </Button>
                    <GroupBox Header="專ブラへの返答" HorizontalAlignment="Left" VerticalAlignment="Top" Margin="10,291,0,0" Height="55" Width="604" ToolTip="dat応答の互換性を向上させる設定、必要なければ無効のままで大丈夫です。"/>
                    <CheckBox x:Name="gZipResponse" Content="dat取得時にgZip圧縮で返答" HorizontalAlignment="Left" VerticalAlignment="Top" Margin="31,317,0,0" Height="20" ToolTip="專ブラへの返答時に必要であればgzip圧縮して返答します" IsChecked="{Binding gZipResponse, Mode=TwoWay, NotifyOnTargetUpdated=True, NotifyOnSourceUpdated=True, UpdateSourceTrigger=PropertyChanged}" TabIndex="11"/>
                    <CheckBox x:Name="CopyrightReplace" Content="＆#169;→＆copy;変換" HorizontalAlignment="Left" VerticalAlignment="Top" Margin="241,317,0,0" Height="20" ToolTip="スレタイ中のⓒの特殊文字を変換して返答します" IsChecked="{Binding CRReplace, Mode=TwoWay, NotifyOnTargetUpdated=True, NotifyOnSourceUpdated=True, UpdateSourceTrigger=PropertyChanged}" TabIndex="12"/>
                </Grid>
            </TabItem>
            <TabItem x:Name="SetTab2" Header="拡張設定" KeyboardNavigation.TabNavigation="Local">
                <Grid>
                    <GroupBox Width="604" VerticalAlignment="Top" Margin="10,10,0,0" Height="80" HorizontalAlignment="Left" Header="専用ブラウザの同時起動"/>
                    <TextBlock Width="100" VerticalAlignment="Top" Text="專ブラexeのパス" TextWrapping="Wrap" Margin="30,46.652,0,0" Height="20" HorizontalAlignment="Left"/>
                    <Button Width="85" VerticalAlignment="Top" ToolTip="同時起動する専ブラを選択します" TabIndex="2" x:Name="SenburaChoose" Margin="435,41.652,0,0" Height="25" HorizontalAlignment="Left" Command="{Binding OnClick, Mode=OneWay}" CommandParameter="SenburaChoose" Content="専ブラ選択"/>
                    <TextBox Width="295" VerticalAlignment="Top" ToolTip="同時起動する専ブラexeファイルへのパス。同時起動しない時は空欄に" TabIndex="1" Text="{Binding SenburaPath, Mode=TwoWay, NotifyOnTargetUpdated=True, NotifyOnSourceUpdated=True, UpdateSourceTrigger=LostFocus}" TextWrapping="NoWrap" x:Name="SenburaPath" Margin="135,42.872,0,0" Height="25" HorizontalAlignment="Left" AcceptsReturn="False"/>
                    <CheckBox Width="79.863" VerticalAlignment="Top" ToolTip="専ブラと2chAPIProxyの片方が終了したらもう片方も終了させる場合はチェック" TabIndex="3" x:Name="SyncEnd" Margin="525,46.652,0,0" IsChecked="{Binding SyncEnd, Mode=TwoWay, NotifyOnTargetUpdated=True, NotifyOnSourceUpdated=True, UpdateSourceTrigger=PropertyChanged}" Height="25" HorizontalAlignment="Left" Content="終了を同期"/>
                    <GroupBox Width="604" VerticalAlignment="Top" ToolTip="この項目は有効にする事でセキュリティのリスクを伴います、理解の上自己責任で設定してください" Margin="10,105.8,0,0" Height="130" HorizontalAlignment="Left" Header="WAN側からの接続設定"/>
                    <CheckBox VerticalAlignment="Top" ToolTip="チェックで、WAN側からの接続に対してプロクシとして動作します" TabIndex="4" x:Name="WANAccess" Margin="30,133.2,0,0" IsChecked="{Binding WANAccess, Mode=TwoWay, NotifyOnTargetUpdated=True, NotifyOnSourceUpdated=True, UpdateSourceTrigger=PropertyChanged}" Height="20" HorizontalAlignment="Left" Content="WANからのアクセスを有効にする"/>
                    <TextBox Width="490" VerticalAlignment="Top" ToolTip="WANからのアクセス時の認証用のID。WAN接続利用時は初期から変更の上必ず設定してください" TabIndex="5" Text="{Binding WANID, Mode=TwoWay, NotifyOnTargetUpdated=True, NotifyOnSourceUpdated=True, UpdateSourceTrigger=LostFocus}" x:Name="WANID" Margin="95,158.2,0,0" Height="25" HorizontalAlignment="Left"/>
                    <PasswordBox Width="490" VerticalAlignment="Top" ToolTip="WANからのアクセス時の認証用のPW。WAN接続利用時は初期から変更の上必ず設定してください" TabIndex="6" local:PasswordBoxHelper.Password="{Binding WANPW, NotifyOnTargetUpdated=True, NotifyOnSourceUpdated=True, UpdateSourceTrigger=LostFocus}" x:Name="WANPW" Margin="95,188.2,0,0" local:PasswordBoxHelper.IsAttached="True" Height="25" HorizontalAlignment="Left"/>
                    <TextBlock VerticalAlignment="Top" Text="認証用ID" TextWrapping="Wrap" Margin="30,163.2,0,0" Height="20" HorizontalAlignment="Left"/>
                    <TextBlock VerticalAlignment="Top" Text="認証用PW" TextWrapping="Wrap" Margin="30,193.2,0,0" Height="20" HorizontalAlignment="Left"/>
                    <Button Width="85" VerticalAlignment="Top" ToolTip="全タブの設定変更をファイルへ保存します" TabIndex="15" x:Name="SettingSave2" Margin="10,383.4,0,0" Height="25" HorizontalAlignment="Left" Command="{Binding OnClick, Mode=OneWay}" CommandParameter="UpdateKey">
                        <StackPanel>
                            <TextBlock>変更を保存</TextBlock>
                            <Popup Name="SaveNotice2" Placement="Top" StaysOpen="False" PopupAnimation="Fade" IsOpen="{Binding PopupVisible, Mode=TwoWay, NotifyOnTargetUpdated=True, NotifyOnSourceUpdated=True, UpdateSourceTrigger=PropertyChanged}">
                                <TextBlock Background="LightCyan" Foreground="LightSlateGray">保存しました</TextBlock>
                            </Popup>
                        </StackPanel>
                    </Button>
                    <GroupBox Width="604" VerticalAlignment="Top" Margin="10,252,0,0" Height="126.4" HorizontalAlignment="Left" Header="その他"/>
                    <CheckBox VerticalAlignment="Top" ToolTip="2chAPIProxyを複数同時に起動できるようにします" TabIndex="7" x:Name="duplication" Margin="30,276.8,0,0" IsChecked="{Binding duplication, Mode=TwoWay, NotifyOnTargetUpdated=True, NotifyOnSourceUpdated=True, UpdateSourceTrigger=PropertyChanged}" Height="20" HorizontalAlignment="Left" Content="多重起動を許可する"/>
                    <CheckBox VerticalAlignment="Top" ToolTip="ウィンドウ右上の閉じるボタンを押した時、終了せずにタスクトレイに格納します" TabIndex="9" x:Name="ClosetoMin" Margin="30,301.8,0,0" IsChecked="{Binding ClosetoMin, Mode=TwoWay, NotifyOnTargetUpdated=True, NotifyOnSourceUpdated=True, UpdateSourceTrigger=PropertyChanged}" Height="20" HorizontalAlignment="Left" Content="×ボタンを押した時、最小化する"/>
                    <CheckBox VerticalAlignment="Top" ToolTip="多重起動を禁止している時、既に起動している2chAPIProxyのウィンドウを表示してから終了します" TabIndex="8" x:Name="ShowWindow" Margin="300,277,0,0" IsChecked="{Binding ShowWindow, Mode=TwoWay, NotifyOnTargetUpdated=True, NotifyOnSourceUpdated=True, UpdateSourceTrigger=PropertyChanged}" Height="20" HorizontalAlignment="Left" Content="多重起動時、起動中のウィンドウを表示してから終了">
                        <CheckBox.Style>
                            <Style TargetType="{x:Type CheckBox}">
                                <Setter Property="FontSize" Value="12px"/>
                                <Setter Property="IsEnabled" Value="False"/>
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding duplication}" Value="false">
                                        <Setter Property="IsEnabled" Value="True"/>
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </CheckBox.Style>
                    </CheckBox>
                    <CheckBox x:Name="BeLogin" Content="Beログイン処理を代行する" HorizontalAlignment="Left" Height="20" Margin="300,302,0,0" VerticalAlignment="Top" ToolTip="Be2.1移行に伴ってログインできない場合にご利用ください。特に問題ない專ブラでもhttps経由でログインするので多少セキュアになります。" TabIndex="10" IsChecked="{Binding BeLogin, Mode=TwoWay, NotifyOnTargetUpdated=True, NotifyOnSourceUpdated=True, UpdateSourceTrigger=PropertyChanged}"/>
                    <CheckBox x:Name="UseTLSWrite" Content="2chへのアクセスにhttps(TLS)を利用する" Height="20" Margin="30,326.8,0,0" VerticalAlignment="Top" ToolTip="2chへのアクセスに内部的にTLSを利用します。非対応の板で書き込みできない等の場合は無効にしてください。" IsChecked="{Binding UseTLSWrite, Mode=TwoWay, NotifyOnTargetUpdated=True, NotifyOnSourceUpdated=True, UpdateSourceTrigger=PropertyChanged}" TabIndex="11" HorizontalAlignment="Left"/>
                    <CheckBox Content="5chのリンクを2chに置換する" HorizontalAlignment="Left" VerticalAlignment="Top" Margin="30,351.8,0,0" Height="20" TabIndex="13" ToolTip="dat内の5ch.netへのリンクを2ch.netに置き換えます。" IsChecked="{Binding Replace5chURI, Mode=TwoWay, NotifyOnTargetUpdated=True, NotifyOnSourceUpdated=True, UpdateSourceTrigger=PropertyChanged}"/>
                    <CheckBox Content="2chのhttpsをhttpに置換する" HorizontalAlignment="Left" VerticalAlignment="Top" Margin="300,327,0,0" Height="20" TabIndex="14" ToolTip="2ch(5ch)のスレや板等のhttpsリンクをhttpに置換します。その際URLの頭に半角スペースを挿入します。" IsChecked="{Binding ReplaceHttpsLink, Mode=TwoWay, NotifyOnTargetUpdated=True, NotifyOnSourceUpdated=True, UpdateSourceTrigger=PropertyChanged}"/>
                    <!--<CheckBox Content="したらばの過去ログ応答を302に置換する" HorizontalAlignment="Left" Height="20" VerticalAlignment="Top" Margin="255.8,301.8,0,0" ToolTip="したらばの過去ログへアクセスした時の応答が301になったのを302で応答するようにします。" TabIndex="10"/>-->
                </Grid>
            </TabItem>
            <TabItem x:Name="SetTab3"  Header="HTML変換設定" KeyboardNavigation.TabNavigation="Local">
                <Grid>
                    <GroupBox Header="過去ログのHTMLからの取得" VerticalAlignment="Top" Margin="10,10,10,0" Height="109"/>
                    <CheckBox x:Name="KakotoHTML" Content="過去ログをHTMLから変換する" HorizontalAlignment="Left" Height="20" Margin="30,37.4,0,0" VerticalAlignment="Top" ToolTip="過去ログをhtmlから変換して取得します" IsChecked="{Binding KakotoHTML, Mode=TwoWay, NotifyOnTargetUpdated=True, NotifyOnSourceUpdated=True, UpdateSourceTrigger=PropertyChanged}" TabIndex="1"/>
                    <CheckBox x:Name="OfflawRokkaPermutation" Content="offlaw2/Rokkaへのアクセスを置換する" HorizontalAlignment="Left" VerticalAlignment="Top" Margin="30,62,0,0" Height="20" ToolTip="offlaw2/RokkaへのアクセスをHTML変換したdatで返します。" IsChecked="{Binding OfflawRokkaPermutation, Mode=TwoWay, NotifyOnTargetUpdated=True, NotifyOnSourceUpdated=True, UpdateSourceTrigger=PropertyChanged}" TabIndex="3">
                        <CheckBox.Style>
                            <Style TargetType="{x:Type CheckBox}">
                                <Setter Property="FontSize" Value="12px"/>
                                <Setter Property="IsEnabled" Value="False"/>
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding KakotoHTML}" Value="True">
                                        <Setter Property="IsEnabled" Value="True"/>
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </CheckBox.Style>
                    </CheckBox>
                    <CheckBox x:Name="AllReturn" Content="差分検出を行わない" HorizontalAlignment="Left" VerticalAlignment="Top" Margin="291,87,0,0" Height="20" ToolTip="專ブラで既読スレのHTML変換時、変換したdatを&gt;&gt;1から最後まで全部返します。チェックを入れない場合、どこまで読んだか推定して途中から返します。" IsChecked="{Binding AllReturn, Mode=TwoWay, NotifyOnTargetUpdated=True, NotifyOnSourceUpdated=True, UpdateSourceTrigger=PropertyChanged}" TabIndex="6">
                        <CheckBox.Style>
                            <Style TargetType="{x:Type CheckBox}">
                                <Setter Property="FontSize" Value="12px"/>
                                <Setter Property="IsEnabled" Value="False"/>
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding KakotoHTML}" Value="True">
                                        <Setter Property="IsEnabled" Value="True"/>
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </CheckBox.Style>
                    </CheckBox>
                    <CheckBox x:Name="OnlyORPerm" Content="offlaw2/Rokkaへのアクセス置換時のみHTML変換する" HorizontalAlignment="Left" VerticalAlignment="Top" Margin="291,62,0,0" Height="20" IsChecked="{Binding OnlyORPerm, Mode=TwoWay, NotifyOnTargetUpdated=True, NotifyOnSourceUpdated=True, UpdateSourceTrigger=PropertyChanged}" ToolTip="HTMLからの過去ログ取得をofflaw2/Rokkaアクセス置換時のみ行います。專ブラが対応していれば、HTMLからの過去ログ取得時のレスのずれが起こらなくなります。" Tag="" TabIndex="4">
                        <CheckBox.Style>
                            <Style TargetType="{x:Type CheckBox}">
                                <Setter Property="FontSize" Value="12px"/>
                                <Setter Property="IsEnabled" Value="False"/>
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding OfflawRokkaPermutation}" Value="True">
                                        <Setter Property="IsEnabled" Value="True"/>
                                    </DataTrigger>
                                    <DataTrigger Binding="{Binding KakotoHTML}" Value="False">
                                        <Setter Property="IsEnabled" Value="False"/>
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </CheckBox.Style>
                    </CheckBox>
                    <!--<CheckBox x:Name="ChunkedResponse" Content="offlaw2置換時ChunkedTransferで返答" HorizontalAlignment="Left" VerticalAlignment="Top" Margin="380,37.4,0,0" Height="20" ToolTip="Offlaw2のアクセス置換時にChunkeエンコードで返答します。問題が起こらなければ有効にする必要は無いです。" IsChecked="{Binding ChunkedResponse, Mode=TwoWay, NotifyOnTargetUpdated=True, NotifyOnSourceUpdated=True, UpdateSourceTrigger=PropertyChanged}" TabIndex="5" Visibility="Hidden">
                        <CheckBox.Style>
                            <Style TargetType="{x:Type CheckBox}">
                                <Setter Property="IsEnabled" Value="False"/>
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding OfflawRokkaPermutation}" Value="True">
                                        <Setter Property="IsEnabled" Value="True"/>
                                    </DataTrigger>
                                    <DataTrigger Binding="{Binding KakotoHTML}" Value="False">
                                        <Setter Property="IsEnabled" Value="False"/>
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </CheckBox.Style>
                    </CheckBox>-->
                    <GroupBox Header="HTMLtoDatアルゴリズムの外部読み込み" VerticalAlignment="Top" Margin="10,132,10,0" Height="246.4"/>
                    <CheckBox x:Name="CEExternalRead" Content="HTML変換処理を外部ソースコードから読み込む" HorizontalAlignment="Left" Height="20" Margin="30,158.2,0,0" VerticalAlignment="Top" ToolTip="過去ログをHTMLから変換する際の変換処理部を外部ファイルから読み込みます。" TabIndex="7" IsChecked="{Binding CEExternalRead, Mode=TwoWay, NotifyOnTargetUpdated=True, NotifyOnSourceUpdated=True, UpdateSourceTrigger=PropertyChanged}">
                        <CheckBox.Style>
                            <Style TargetType="{x:Type CheckBox}">
                                <Setter Property="FontSize" Value="12px"/>
                                <Setter Property="IsEnabled" Value="False"/>
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding KakotoHTML}" Value="True">
                                        <Setter Property="IsEnabled" Value="True"/>
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </CheckBox.Style>
                    </CheckBox>
                    <TextBlock HorizontalAlignment="Left" TextWrapping="Wrap" Text="ソースファイルのパス" VerticalAlignment="Top" Margin="30,184.38,0,0" Height="20"/>
                    <TextBox x:Name="CESrcfilePath" HorizontalAlignment="Left" Height="25" VerticalAlignment="Top" Width="308.383" Margin="166.617,179.38,0,0" ToolTip="変換処理の記述されたソースファイルのパス" VerticalScrollBarVisibility="Disabled" TabIndex="8" Text="{Binding CESrcfilePath, Mode=TwoWay, NotifyOnTargetUpdated=True, NotifyOnSourceUpdated=True, UpdateSourceTrigger=LostFocus}"/>
                    <Button x:Name="SrcfileChoose" Content="ファイル選択" HorizontalAlignment="Left" VerticalAlignment="Top" Width="85" Margin="480,179,0,0" Height="25" ToolTip="変換処理の記述されたソースファイルを選択。" Command="{Binding ChooseSrcFile, Mode=OneWay}" TabIndex="9">
                        <Button.Style>
                            <Style TargetType="{x:Type Button}">
                                <Setter Property="FontSize" Value="12px"/>
                                <Setter Property="IsEnabled" Value="False"/>
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding CEExternalRead}" Value="True">
                                        <Setter Property="IsEnabled" Value="True"/>
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </Button.Style>
                    </Button>
                    <Button x:Name="CECompile" Content="コンパイルとテスト" HorizontalAlignment="Left" VerticalAlignment="Top" Margin="480,209.38,0,0" Height="25" ToolTip="選択されたソースファイルをコンパイルします。" Command="{Binding Compile, Mode=OneWay}"  TabIndex="11">
                        <Button.Style>
                            <Style TargetType="{x:Type Button}">
                                <Setter Property="FontSize" Value="12px"/>
                                <Setter Property="IsEnabled" Value="False"/>
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding CEExternalRead}" Value="True">
                                        <Setter Property="IsEnabled" Value="True"/>
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </Button.Style>
                    </Button>
                    <!--<Button x:Name="CECompiledTest" Content="テスト" HorizontalAlignment="Left" VerticalAlignment="Top" Width="85" Margin="240,241.38,0,0" Height="25" ToolTip="コンパイルされた結果をテストします。下のテキストボックスに2chスレッドのURLを入力してください。" Command="{Binding Test}" TabIndex="5" Visibility="Hidden">
                        <Button.Style>
                            <Style TargetType="{x:Type Button}">
                                <Setter Property="IsEnabled" Value="False"/>
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding CEExternalRead}" Value="True">
                                        <Setter Property="IsEnabled" Value="True"/>
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </Button.Style>
                    </Button>-->
                    <TextBlock HorizontalAlignment="Left" TextWrapping="Wrap" VerticalAlignment="Top" Margin="30,214.38,0,0" Height="20"><Run Text="変換"/><Run Text=""/><Run Text="テスト用スレ"/><Run Text="の"/><Run Text="URL"/></TextBlock>
                    <TextBox x:Name="TestURI" HorizontalAlignment="Left" Height="25" VerticalAlignment="Top" Width="308.383" Margin="166.617,209.38,0,0" ToolTip="この項目は設定として保存されません。" VerticalScrollBarVisibility="Disabled" TabIndex="10" Text="{Binding TestURI, Mode=TwoWay, NotifyOnTargetUpdated=True, NotifyOnSourceUpdated=True, UpdateSourceTrigger=LostFocus}"/>
                    <CheckBox x:Name="SkipAliveCheck" Content="dat落ち判定をスキップする" HorizontalAlignment="Left" VerticalAlignment="Top" Margin="30,87,0,0" Height="20" ToolTip="HTMLから変換する前にスレが本当にdat落ちしているかのチェックを行いません。判定がおかしい場合に有効にしてください。" IsChecked="{Binding SkipAliveCheck, Mode=TwoWay, NotifyOnTargetUpdated=True, NotifyOnSourceUpdated=True, UpdateSourceTrigger=PropertyChanged}" TabIndex="5">
                        <CheckBox.Style>
                            <Style TargetType="{x:Type CheckBox}">
                                <Setter Property="FontSize" Value="12px"/>
                                <Setter Property="IsEnabled" Value="False"/>
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding KakotoHTML}" Value="True">
                                        <Setter Property="IsEnabled" Value="True"/>
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </CheckBox.Style>
                    </CheckBox>
                    <TextBox x:Name="CEResultView" TextWrapping="NoWrap" Text="{Binding CEResultView, Mode=TwoWay, NotifyOnTargetUpdated=True, NotifyOnSourceUpdated=True, UpdateSourceTrigger=LostFocus}" Margin="30,250.18,30,61.2" TabIndex="12" HorizontalScrollBarVisibility="Auto" VerticalScrollBarVisibility="Auto"/>
                    <Button Width="85" VerticalAlignment="Top" ToolTip="全タブの設定変更をファイルへ保存します" TabIndex="13" x:Name="SettingSave3" Margin="10,383.4,0,0" Height="25" HorizontalAlignment="Left" Command="{Binding OnClick, Mode=OneWay}" CommandParameter="UpdateKey">
                        <StackPanel>
                            <TextBlock>変更を保存</TextBlock>
                            <Popup Name="SaveNotice3" Placement="Top" StaysOpen="False" PopupAnimation="Fade" IsOpen="{Binding PopupVisible, Mode=TwoWay, NotifyOnTargetUpdated=True, NotifyOnSourceUpdated=True, UpdateSourceTrigger=PropertyChanged}">
                                <TextBlock Background="LightCyan" Foreground="LightSlateGray">保存しました</TextBlock>
                            </Popup>
                        </StackPanel>
                    </Button>
                    <CheckBox x:Name="KakolinkPermutation" Content="過去ログ倉庫へのアクセスを置換する" HorizontalAlignment="Left" VerticalAlignment="Top" Margin="291,37,0,0" Height="20" ToolTip="過去ログ倉庫（/kako/を含むリンク）へのアクセスをHTML変換したdatで返します。" IsChecked="{Binding KakolinkPermutation, Mode=TwoWay, NotifyOnTargetUpdated=True, NotifyOnSourceUpdated=True}" TabIndex="2">
                        <CheckBox.Style>
                            <Style TargetType="{x:Type CheckBox}">
                                <Setter Property="FontSize" Value="12px"/>
                                <Setter Property="IsEnabled" Value="False"/>
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding KakotoHTML}" Value="True">
                                        <Setter Property="IsEnabled" Value="True"/>
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </CheckBox.Style>
                    </CheckBox>
                </Grid>
            </TabItem>
            <TabItem x:Name="SetTab4"  Header="書き込み設定" KeyboardNavigation.TabNavigation="Local">
                <Grid>
                    <GroupBox x:Name="PostUAGroup" Header="User Agent" HorizontalAlignment="Left" Height="99" Margin="10,10,0,0" VerticalAlignment="Top" Width="604"/>
                    <TextBox x:Name="PostUA" HorizontalAlignment="Left" Height="25" Margin="84,51,0,0" TextWrapping="NoWrap" VerticalAlignment="Top" Width="500" ToolTip="書き込み（スレ立て）時に使用するUseAgent。空欄ならアクセス元のUAをそのまま利用します" Text="{Binding UserAgent3, Mode=TwoWay, NotifyOnTargetUpdated=True, NotifyOnSourceUpdated=True, UpdateSourceTrigger=LostFocus}" TabIndex="1"/>
                    <TextBlock HorizontalAlignment="Left" TextWrapping="Wrap" Text="書き込み" VerticalAlignment="Top" Margin="30,56,0,0" Width="50" Height="20"/>
                    <GroupBox x:Name="PostSettingGroup" Header="書き込み時の動作" HorizontalAlignment="Left" Height="71" Margin="10,121,0,0" VerticalAlignment="Top" Width="604"/>
                    <CheckBox x:Name="AllUAReplace_Copy" Content="2chへの全アクセスのUAを変更" VerticalAlignment="Top" Margin="84,81,335,0" Height="20" ToolTip="2chAPIProxyを通る全ての2ch.netへのアクセス(API、HTML取得を除く)のUAを書き込みUAに変更します" IsChecked="{Binding AllUAReplace, Mode=TwoWay, NotifyOnTargetUpdated=True, NotifyOnSourceUpdated=True, UpdateSourceTrigger=PropertyChanged}" TabIndex="3">
                        <CheckBox.Style>
                            <Style TargetType="{x:Type CheckBox}">
                                <Setter Property="FontSize" Value="12px"/>
                                <Setter Property="IsEnabled" Value="True"/>
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding UserAgent3}" Value="">
                                        <Setter Property="IsEnabled" Value="False"/>
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </CheckBox.Style>
                    </CheckBox>
                    <CheckBox x:Name="PostNoReplace_Copy" Content="書き込みへの関与を最小限にする" Height="20" Margin="410,156,30,0" VerticalAlignment="Top" ToolTip="書き込み（スレ立て）時、5chへの変更、https化、UAの変更、のみを行います。送信用にプロクシを通さず書き込むのとほぼ同じになります。" IsChecked="{Binding PostNoReplace, Mode=TwoWay, NotifyOnTargetUpdated=True, NotifyOnSourceUpdated=True, UpdateSourceTrigger=PropertyChanged}" TabIndex="5"/>
                    <CheckBox x:Name="SetReferrer_Copy" Content="リファラを設定する" Height="20" Margin="237,156,278,0" VerticalAlignment="Top" ToolTip="書き込み時のRefererヘッダに、書き込むスレのURLを常に設定するようにします" IsChecked="{Binding SetReferrer, Mode=TwoWay, NotifyOnTargetUpdated=True, NotifyOnSourceUpdated=True, UpdateSourceTrigger=PropertyChanged}" TabIndex="4">
                        <CheckBox.Style>
                            <Style TargetType="{x:Type CheckBox}">
                                <Setter Property="FontSize" Value="12px"/>
                                <Setter Property="IsEnabled" Value="True"/>
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding PostNoReplace}" Value="True">
                                        <Setter Property="IsEnabled" Value="False"/>
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </CheckBox.Style>
                    </CheckBox>
                    <GroupBox x:Name="Postv2Setting" Header="新書き込み仕様関連" HorizontalAlignment="Left" Height="172" Margin="10,206,0,0" VerticalAlignment="Top" Width="604"/>
                    <CheckBox x:Name="EnablePostv2" Content="新書き込み方式を有効にする" VerticalAlignment="Top" Margin="33,242,428,0" Height="20" ToolTip="2022年4月頃導入の新しい書き込み方式を使用します" TabIndex="3" IsChecked="{Binding EnablePostv2, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"/>
                    <CheckBox x:Name="EnablePostv2Pink" Content="bbspinkでも有効にする" VerticalAlignment="Top" Margin="237,242,253,0" Height="20" ToolTip="新しい書き込み方式をbbspinkでも使用します" TabIndex="3" IsChecked="{Binding EnablePostv2onPink, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}">
                        <CheckBox.Style>
                            <Style TargetType="{x:Type CheckBox}">
                                <Setter Property="FontSize" Value="12px"/>
                                <Setter Property="IsEnabled" Value="True"/>
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding EnablePostv2}" Value="False">
                                        <Setter Property="IsEnabled" Value="False"/>
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </CheckBox.Style>
                    </CheckBox>
                    <CheckBox x:Name="PostUTF8" Content="UTF-8で書き込む" VerticalAlignment="Top" Margin="410,242,95,0" Height="20" ToolTip="書き込み時に元のテキストデータをUTF-8エンコーディングに変換して書き込みます" TabIndex="3" IsChecked="{Binding EnableUTF8Post, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}">
                        <CheckBox.Style>
                            <Style TargetType="{x:Type CheckBox}">
                                <Setter Property="FontSize" Value="12px"/>
                                <Setter Property="IsEnabled" Value="True"/>
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding EnablePostv2}" Value="False">
                                        <Setter Property="IsEnabled" Value="False"/>
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </CheckBox.Style>
                    </CheckBox>
                    <Button Width="85" VerticalAlignment="Top" ToolTip="全タブの設定変更をファイルへ保存します" TabIndex="13" x:Name="SettingSave4" Margin="10,383.4,0,0" Height="25" HorizontalAlignment="Left" Command="{Binding OnClick, Mode=OneWay}" CommandParameter="UpdateKey">
                        <StackPanel>
                            <TextBlock>変更を保存</TextBlock>
                            <Popup Name="SaveNotice4" Placement="Top" StaysOpen="False" PopupAnimation="Fade" IsOpen="{Binding PopupVisible, Mode=TwoWay, NotifyOnTargetUpdated=True, NotifyOnSourceUpdated=True, UpdateSourceTrigger=PropertyChanged}">
                                <TextBlock Background="LightCyan" Foreground="LightSlateGray">保存しました</TextBlock>
                            </Popup>
                        </StackPanel>
                    </Button>
                    <TextBox x:Name="field_order" HorizontalAlignment="Left" Height="25" Margin="168,343,0,0" TextWrapping="NoWrap" VerticalAlignment="Top" Width="416" ToolTip="スレ立て時に送信するデータの順序を指定します。＆区切りで左から右に並べてください。無いものは末尾に追加されます。" Text="{Binding ThreadPostFieldOrder, Mode=TwoWay, NotifyOnTargetUpdated=True, NotifyOnSourceUpdated=True, UpdateSourceTrigger=LostFocus}" TabIndex="1" IsEnabled="{Binding EnablePostv2, Mode=OneWay}"/>
                    <TextBlock HorizontalAlignment="Left" TextWrapping="Wrap" Text="フィールド順序（スレ立て）" VerticalAlignment="Top" Margin="30,344,0,0" Height="20"/>
                    <CheckBox x:Name="PostRoninInvalid" Content="書き込み時に浪人を無効化する" HorizontalAlignment="Left" Height="20" Margin="33,156,0,0" VerticalAlignment="Top" IsChecked="{Binding PostRoninInvalid, Mode=TwoWay, NotifyOnTargetUpdated=True, NotifyOnSourceUpdated=True, UpdateSourceTrigger=PropertyChanged}" TabIndex="12" ToolTip="書き込み(スレ立て)時に浪人関連の情報を削除して書き込みます。書き込みに浪人を利用したくない場合にご利用ください。"/>
                    <CheckBox x:Name="AddX2chUAHeader" Content="X-2ch-UAヘッダを送信する" VerticalAlignment="Top" Margin="33,267,428,0" Height="20" ToolTip="書き込み時のヘッダにX2chUAを追加します" TabIndex="3" IsChecked="{Binding AddX2chUAHeader, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}">
                        <CheckBox.Style>
                            <Style TargetType="{x:Type CheckBox}">
                                <Setter Property="FontSize" Value="12px"/>
                                <Setter Property="IsEnabled" Value="True"/>
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding EnablePostv2}" Value="False">
                                        <Setter Property="IsEnabled" Value="False"/>
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </CheckBox.Style>
                    </CheckBox>
                    <CheckBox x:Name="AddMsToNonce" Content="nonce値にミリ秒を付加する" VerticalAlignment="Top" Margin="237,267,232,0" Height="20" ToolTip="書き込み時に使用するnonce（時間）値に小数点以下3桁を含めるようにします" TabIndex="3" IsChecked="{Binding AddMsToNonce, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}">
                        <CheckBox.Style>
                            <Style TargetType="{x:Type CheckBox}">
                                <Setter Property="FontSize" Value="12px"/>
                                <Setter Property="IsEnabled" Value="True"/>
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding EnablePostv2}" Value="False">
                                        <Setter Property="IsEnabled" Value="False"/>
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </CheckBox.Style>
                    </CheckBox>
                    <CheckBox x:Name="PostUTF8_Copy" Content="UTF-8エンコーディングを仮定する" VerticalAlignment="Top" Margin="410,267,30,0" Height="20" ToolTip="書き込み時、送られてきたデータがUTF-8エンコーディングであると仮定して処理します。どうしても文字化けする場合に試してみてください" TabIndex="3" IsChecked="{Binding AssumeReqBodyIsUTF8, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}">
                        <CheckBox.Style>
                            <Style TargetType="{x:Type CheckBox}">
                                <Setter Property="FontSize" Value="12px"/>
                                <Setter Property="IsEnabled" Value="True"/>
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding EnablePostv2}" Value="False">
                                        <Setter Property="IsEnabled" Value="False"/>
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </CheckBox.Style>
                    </CheckBox>
                    <TextBox x:Name="field_order_Copy" HorizontalAlignment="Left" Height="25" Margin="168,318,0,0" TextWrapping="NoWrap" VerticalAlignment="Top" Width="416" ToolTip="書き込み時に送信するデータの順序を指定します。＆区切りで左から右に並べてください。無いものは末尾に追加されます。" Text="{Binding PostFieldOrder, Mode=TwoWay, NotifyOnTargetUpdated=True, NotifyOnSourceUpdated=True, UpdateSourceTrigger=LostFocus}" TabIndex="1" IsEnabled="{Binding EnablePostv2, Mode=OneWay}"/>
                    <TextBlock HorizontalAlignment="Left" TextWrapping="Wrap" VerticalAlignment="Top" Margin="30,319,0,0" Height="20"><Run Text="フィールド順序"/><Run Text="（書き込み）"/></TextBlock>
                </Grid>
            </TabItem>
        </TabControl>
    </Grid>
</Window>